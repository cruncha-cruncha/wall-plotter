{"version":3,"sources":["components/ImageHandler/state/atoms.js","components/ImageHandler/ImageHandler.js","components/ImageHandler/useImageHandler.js","components/SpecInputs/state/atoms.js","components/SpecInputs/components/InputRow.js","components/SpecInputs/SpecInputs.js","components/SpecInputs/useSpecInputs.js","components/Converter/state/atoms.js","components/Converter/state/coorErrors.js","components/Converter/state/coorsReady.js","components/Converter/helpers/solveCoors.js","components/Converter/state/realCoors.js","components/Converter/state/specErrors.js","components/Converter/state/specsReady.js","components/Converter/Converter.js","components/Converter/useConverter.js","components/Preview/Preview.js","components/Preview/usePreview.js","components/ConversionProgress/ConversionProgress.js","components/ConversionProgress/useConversionProgress.js","App.js","reportWebVitals.js","index.js"],"names":["fileContentState","atom","key","default","ImageHandler","setFileContent","useSetRecoilState","useState","file","setFile","className","Label","for","Input","type","id","accept","onChange","e","newFile","URL","createObjectURL","target","files","reader","FileReader","onload","result","readAsText","style","border","height","minWidth","overflowY","src","width","alt","specsState","InputRow","label","actionType","specs","dispatch","step","value","payload","SpecInputs","useRecoilState","setSpecs","action","useSpecInputs","FormGroup","tag","check","checked","progressState","downloadBlobState","BOUNDS","upper","lower","coorErrorsState","selector","get","fileContent","specsAlpha","msg","Object","keys","reduce","out","k","Number","spec","coorsReadyState","solveCoors","eyeToEye","toolOffsetX","toolOffsetY","leftLength","rightLength","n1","n2","Math","pow","a","c","leftY2","sqrt","x","y","realCoorsState","ready","mmToCm","mm","dom","DOMParser","parseFromString","mySvg","Array","from","querySelectorAll","getAttribute","split","unitToMm","unit","spoolRadius","leftEye","rightEye","leftLine","start","end","rightLine","outputRect","totalWidth","totalHeight","coors","isNaN","rightY2","leftX2","rightX2","alert","specErrorsState","realCoors","specsReadyState","Converter","setProgress","useRecoilValue","specsReady","specErrors","coorErrors","downloadBlob","setDownloadBlob","downloadHref","setDownloadHref","cmToMm","cm","go","progress","updateProgress","push","Promise","resolve","setTimeout","parser","querySelector","myPaths","length","i","round","getTotalLength","mmToUnit","pointToCoor","point","distToLine","coorA","coorB","coorC","abs","pathToCoors","path","total","getPointAtLength","resolution","lag","precision","newCoor","getPulses","actualLeftSteps","leftDirection","actualRightSteps","rightDirection","mostSteps","max","leftModulus","rightModulus","fill","map","l","r","leftSum","rightSum","eD","b","mmPerStep","PI","stepsPerMm","traverseStraight","current","desired","currentLeftCoor","desiredLeftCoor","currentRightCoor","desiredRightCoor","leftDelta","rightDelta","newLeftLength","newRightLength","pulses","newCurrent","masterCoors","t1","Date","now","t2","bigPulseList","coor","stepsPerSecond","Blob","JSON","stringify","useEffect","useConverter","Button","disabled","onClick","href","download","Preview","svg","setSvg","newSvg","version","xmlns","viewBox","x1","y1","x2","y2","stroke","strokeWidth","cx","cy","usePreview","ConversionProgress","padding","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.681c6350.chunk.js","sourcesContent":["import { atom } from 'recoil';\r\n\r\nexport const fileContentState = atom({\r\n  key: 'fileContents',\r\n  default: ''\r\n});","import React, { useState } from 'react';\r\nimport { Label, Input } from 'reactstrap';\r\n\r\nimport useImageHandler from './useImageHandler';\r\n\r\nfunction ImageHandler() {\r\n  const { setFileContent } = useImageHandler();\r\n  const [file, setFile] = useState(null);\r\n\r\n  const handleChange = (e) => {\r\n    const newFile = URL.createObjectURL(e.target.files[0]);\r\n    setFile(newFile);\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = () => { setFileContent(reader.result); };\r\n    reader.readAsText(e.target.files[0]);\r\n  }\r\n\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <div className=\"mb-3\">\r\n        <Label for=\"select-svg-input\">Select an SVG</Label>\r\n        <Input type=\"file\" id=\"select-svg-input\" accept=\".svg\" onChange={handleChange} />\r\n      </div>\r\n      <div className=\"d-flex\">\r\n        <div style={{ border: '1px solid black', height: \"402px\", minWidth: \"402px\", overflowY: \"scroll\" }} >\r\n          {file && <img src={file} width=\"400\" alt=\"selected img\" />}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageHandler;","import { useSetRecoilState } from 'recoil';\r\n\r\nimport { fileContentState } from './state';\r\n\r\nexport default function useImageHandler() {\r\n  const setFileContent = useSetRecoilState(fileContentState);\r\n\r\n  return {\r\n    setFileContent\r\n  };\r\n}","import { atom } from 'recoil';\r\n\r\nexport const specsState = atom({\r\n  key: \"specs\",\r\n  default: {\r\n    'step-resolution': '1.8',\r\n    'final-height': '60',\r\n    'spool-radius': '2',\r\n    'eye-to-eye': '150',\r\n    'specify-start-by-coors': false,\r\n    'initial-length-left': '42',\r\n    'initial-length-right': '124',\r\n    'initial-coors-x': '30',\r\n    'initial-coors-y': '30',\r\n    'tool-offset-x': '2',\r\n    'tool-offset-y': '1.5'\r\n  }\r\n});","import React from 'react';\r\nimport { Label, Input } from 'reactstrap';\r\n\r\nconst InputRow = ({ label, actionType, specs, dispatch }) => {\r\n\r\n  const fV = (val) => val; //Number(val).toString();\r\n\r\n  return (\r\n    <div className=\"row mb-3\">\r\n      <div className=\"col-6 d-flex flex-row align-items-center\">\r\n        <Input id={actionType} type=\"number\" step=\"any\" value={fV(specs[actionType])} onChange={(e) => dispatch({ type: actionType, payload: e.target.value })} />\r\n      </div>\r\n      <div className=\"col-6 d-flex flex-row align-items-center\">\r\n        <Label for={actionType}>{label}</Label>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InputRow;","import React, { Fragment } from 'react';\r\nimport { FormGroup, Label, Input } from 'reactstrap';\r\n\r\nimport useSpecInputs from './useSpecInputs';\r\nimport InputRow from './components/InputRow';\r\n\r\nconst SpecInputs = () => {\r\n\r\n  const { specs, dispatch } = useSpecInputs();\r\n\r\n  return (\r\n    <div className=\"specifications\">\r\n      <h2>Specifications</h2>\r\n      <p>All values in cms unless otherwise specified.</p>\r\n      <InputRow label=\"Step Resolution (degrees)\" actionType='step-resolution' specs={specs} dispatch={dispatch} />\r\n      <InputRow label=\"Output Height\" actionType='final-height' specs={specs} dispatch={dispatch} />\r\n      <InputRow label=\"Spool Radius\" actionType='spool-radius' specs={specs} dispatch={dispatch} />\r\n      <InputRow label=\"Eye-To-Eye\" actionType='eye-to-eye' specs={specs} dispatch={dispatch} />\r\n      <p>It's assumed that the plotter uses two strings, each with one end wound around a spool, travelling through an eye, and the other attached to a symmetrical tool holder. The program will start drawing from the upper-left corner of the image.</p>\r\n      <FormGroup tag=\"fieldset\">\r\n        <legend>Initial Position</legend>\r\n        <FormGroup check>\r\n          <Label check>\r\n            <Input\r\n              type=\"radio\"\r\n              onChange={() => dispatch({ type: 'specify-start-by-coors', payload: false })}\r\n              checked={!specs['specify-start-by-coors']}/>{' '}\r\n            Specify by distance from eyes\r\n          </Label>\r\n        </FormGroup>\r\n        <FormGroup check>\r\n          <Label check>\r\n            <Input\r\n              type=\"radio\"\r\n              onChange={() => dispatch({ type: 'specify-start-by-coors', payload: true })}\r\n              checked={specs['specify-start-by-coors']}/>{' '}\r\n            Specify by horizontal and vertical offset\r\n          </Label>\r\n        </FormGroup>\r\n      </FormGroup>\r\n      {specs['specify-start-by-coors'] \r\n        ? (\r\n          <Fragment>\r\n            <p>Measure from the center of the left eye to the top left corner of the desired image location.</p>\r\n            <InputRow label=\"Horizontal Offset\" actionType='initial-coors-x' specs={specs} dispatch={dispatch} />\r\n            <InputRow label=\"Vertical Offset\" actionType='initial-coors-y' specs={specs} dispatch={dispatch} />\r\n          </Fragment>)\r\n        : (\r\n          <Fragment>\r\n            <p>Measure from either the left or right eye to the corresponding tool holder terminus (where the string connects).</p>\r\n            <InputRow label=\"Left, initial distance\" actionType='initial-length-left' specs={specs} dispatch={dispatch} />\r\n            <InputRow label=\"Right, initial distance\" actionType='initial-length-right' specs={specs} dispatch={dispatch} />\r\n          </Fragment>)}\r\n      <p>The left terminus is assumed to be above and to the left of the tool, while the right terminus is assumed to be above and to the right of the tool. \"Horizontal Terminus Offset\" is the horizontal distance between a terminus and the tool tip (it should be the same for both termini); \"Vertical Terminus Offset\" is the vertical distance between a terminus and the tool tip (should also be the same for both).</p>\r\n      <InputRow label=\"Horizontal Terminus Offset\" actionType='tool-offset-x' specs={specs} dispatch={dispatch} />\r\n      <InputRow label=\"Vertical Terminus Offset\" actionType='tool-offset-y' specs={specs} dispatch={dispatch} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SpecInputs;","import { useRecoilState } from 'recoil';\r\n\r\nimport { specsState } from './state';\r\n\r\nexport default function useSpecInputs() {\r\n  const [ specs, setSpecs ] = useRecoilState(specsState);\r\n\r\n  const dispatch = (action) => {\r\n    setSpecs({\r\n      ...specs,\r\n      [action.type]: action.payload\r\n    });\r\n  }\r\n\r\n  return {\r\n    specs,\r\n    dispatch\r\n  }\r\n}","import { atom } from 'recoil';\r\n\r\nexport const progressState = atom({\r\n  key: 'progress',\r\n  default: []\r\n});\r\n\r\nexport const downloadBlobState = atom({\r\n  key: 'downloadBload',\r\n  default: null\r\n})","import { selector } from 'recoil';\r\n\r\nimport { fileContentState } from '../../ImageHandler/state';\r\nimport { specsState } from '../../SpecInputs/state';\r\n\r\nexport const BOUNDS = {\r\n  'final-height': {\r\n    upper: 1000,\r\n    lower: 1\r\n  },\r\n  'eye-to-eye': {\r\n    upper: 1000,\r\n    lower: 1\r\n  },\r\n  'spool-radius': {\r\n    upper: 25,\r\n    lower: 0\r\n  },\r\n  'initial-length-left': {\r\n    upper: 1000,\r\n    lower: 0\r\n  },\r\n  'initial-length-right': {\r\n    upper: 1000,\r\n    lower: 0\r\n  },\r\n  'initial-coors-x': {\r\n    upper: 1000,\r\n    lower: 0\r\n  },\r\n  'initial-coors-y': {\r\n    upper: 1000,\r\n    lower: 0\r\n  },\r\n  'tool-offset-x': {\r\n    upper: 50,\r\n    lower: 0\r\n  },\r\n  'tool-offset-y': {\r\n    upper: 50,\r\n    lower: 0\r\n  }\r\n}\r\n\r\nexport const coorErrorsState = selector({\r\n  key: 'coorErrors',\r\n  get: ({get}) => {\r\n    const fileContent = get(fileContentState);\r\n    const specsAlpha = get(specsState);\r\n\r\n    // do we have a file and specs?\r\n    if (!fileContent || !specsAlpha) {\r\n      return { msg: 'No image' };\r\n    }\r\n\r\n    const specs = Object.keys(specsAlpha).reduce((out, k) => ({\r\n      ...out,\r\n      [k]: Number(specsAlpha[k])\r\n    }), {});\r\n\r\n    // have spec values been entered?\r\n    for (let k of Object.keys(BOUNDS)) {\r\n      if (!(k in specs)) {\r\n        return { spec: k, msg: `Missing ${k} specification` };\r\n      }\r\n    }\r\n\r\n    // are all spec values within a reasonable range? (lower bounds)\r\n    for (let k of Object.keys(BOUNDS)) {\r\n      if (specs[k] > BOUNDS[k].upper) {\r\n        return { spec: k, msg: `${k} is too high; max is ${BOUNDS[k].upper}` };\r\n      } else if (specs[k] < BOUNDS[k].lower) {\r\n        return { spec: k, msg: `${k} is too low; minimum is ${BOUNDS[k].lower}` };\r\n      }\r\n    }\r\n\r\n    // is the initial position physically valid?\r\n    if (specs['specify-start-by-coors']) {\r\n      if (\r\n        specs['initial-coors-x'] +\r\n        (specs['tool-offset-x'] * 2) >\r\n        specs['eye-to-eye']\r\n      ) {\r\n        return { msg: 'Specs are not physically valid' };\r\n      }\r\n    }\r\n\r\n    return null;\r\n  },\r\n});","import { selector } from 'recoil';\r\n\r\nimport { coorErrorsState } from './coorErrors';\r\n\r\nexport const coorsReadyState = selector({\r\n  key: 'coorsReady',\r\n  get: ({get}) => {\r\n    const errors = get(coorErrorsState);\r\n    return !errors;\r\n  },\r\n});","// eyeToEye = sqrt(leftLength^2 - y^2) + (toolOffsetX * 2) + sqrt(rightLength^2 - y^2)\r\n// solve for y\r\n\r\nexport default function solveCoors({ eyeToEye, toolOffsetX, toolOffsetY, leftLength, rightLength }) {\r\n  if (eyeToEye <= 0 || toolOffsetX < 0 || toolOffsetY < 0 || leftLength < 0 || rightLength < 0) {\r\n    return null;\r\n  }\r\n\r\n  const n1 = eyeToEye - (toolOffsetX * 2);\r\n  const n2 = Math.pow(rightLength, 2) - Math.pow(leftLength, 2) - Math.pow(n1, 2);\r\n\r\n  const a = 4 * Math.pow(n1, 2);\r\n  // b is always zero\r\n  const c = -4 * Math.pow(n1, 2) * Math.pow(leftLength, 2) + Math.pow(n2, 2);\r\n\r\n  const leftY2 = Math.sqrt(-4 * a * c) / (2 * a);\r\n  const leftX2 = Math.sqrt(Math.pow(leftLength, 2) - Math.pow(leftY2, 2));\r\n\r\n  return {\r\n    x: leftX2 + toolOffsetX,\r\n    y: leftY2 + toolOffsetY\r\n  };\r\n}","import { selector } from 'recoil';\r\n\r\nimport { fileContentState } from '../../ImageHandler/state';\r\nimport { specsState } from '../../SpecInputs/state';\r\nimport { coorsReadyState } from './coorsReady';\r\n\r\nimport solveCoors from '../helpers/solveCoors';\r\n\r\nexport const realCoorsState = selector({\r\n  key: 'realCoors',\r\n  get: ({get}) => {\r\n    const ready = get(coorsReadyState);\r\n    const specsAlpha = get(specsState);\r\n    const fileContent = get(fileContentState);\r\n\r\n    if (!ready) {\r\n      return null;\r\n    }\r\n\r\n    const specs = Object.keys(specsAlpha).reduce((out, k) => ({\r\n      ...out,\r\n      [k]: Number(specsAlpha[k])\r\n    }), {});\r\n\r\n    const mmToCm = (mm) => mm / 10;\r\n    const cmToMm = (cm) => cm * 10;\r\n\r\n    const parser = new DOMParser();\r\n    const dom = parser.parseFromString(fileContent, \"application/xml\");\r\n\r\n    const mySvg = Array.from(dom.querySelectorAll(\"svg\"))[0];\r\n    if (!mySvg.getAttribute(\"viewBox\")) {\r\n      alert(\"SVG needs a viewBox\");\r\n      return;\r\n    }\r\n\r\n    const [_minX, _minY, width, height] = mySvg.getAttribute(\"viewBox\").split(\",\");\r\n\r\n    const unitToMm = (unit) => unit * cmToMm(specs[\"final-height\"]) / height;\r\n\r\n    if (specs['specify-start-by-coors']) {\r\n      return {\r\n        spoolRadius: specs['spool-radius'],\r\n        leftEye: { x: 0, y: 0 },\r\n        rightEye: { x: specs['eye-to-eye'], y: 0 },\r\n        leftLine: {\r\n          start: { x: 0, y: 0 },\r\n          end: {\r\n            x: specs['initial-coors-x'] - specs['tool-offset-x'],\r\n            y: specs['initial-coors-y'] - specs['tool-offset-y'] }\r\n        },\r\n        rightLine: {\r\n          start: { x: specs['eye-to-eye'], y: 0 },\r\n          end: {\r\n            x: specs['initial-coors-x'] + specs['tool-offset-x'],\r\n            y: specs['initial-coors-y'] - specs['tool-offset-y']\r\n          }\r\n        },\r\n        outputRect: {\r\n          x: specs['initial-coors-x'],\r\n          y: specs['initial-coors-y'],\r\n          width: mmToCm(unitToMm(width)),\r\n          height: mmToCm(unitToMm(height))\r\n        },\r\n        totalWidth: specs['eye-to-eye'],\r\n        totalHeight: specs['initial-coors-y'] + mmToCm(unitToMm(height))\r\n      }\r\n    } else {\r\n      const coors = solveCoors({\r\n        eyeToEye: specs['eye-to-eye'],\r\n        toolOffsetX: specs['tool-offset-x'],\r\n        toolOffsetY: specs['tool-offset-y'],\r\n        leftLength: specs['initial-length-left'],\r\n        rightLength: specs['initial-length-right'],\r\n      });\r\n\r\n      if (!coors) {\r\n        return null;\r\n      }\r\n\r\n      if (isNaN(coors.x) || isNaN(coors.y)) {\r\n        return null;\r\n      }\r\n\r\n      const leftY2 = coors.y - specs['tool-offset-y'];\r\n      const rightY2 = leftY2;\r\n      const leftX2 = coors.x - specs['tool-offset-x'];\r\n      const rightX2 = coors.x + specs['tool-offset-x'];\r\n\r\n      return {\r\n        spoolRadius: specs['spool-radius'],\r\n        leftEye: { x: 0, y: 0 },\r\n        rightEye: { x: specs['eye-to-eye'], y: 0 },\r\n        leftLine: {\r\n          start: { x: 0, y: 0 },\r\n          end: { x: leftX2, y: leftY2 }\r\n        },\r\n        rightLine: {\r\n          start: { x: specs['eye-to-eye'], y: 0 },\r\n          end: { x: rightX2, y: rightY2 }\r\n        },\r\n        outputRect: {\r\n          x: leftX2 + specs['tool-offset-x'],\r\n          y: leftY2 + specs['tool-offset-y'],\r\n          width: mmToCm(unitToMm(width)),\r\n          height: mmToCm(unitToMm(height))\r\n        },\r\n        totalWidth: specs['eye-to-eye'],\r\n        totalHeight: leftY2 + specs['tool-offset-y'] + mmToCm(unitToMm(height))\r\n      }\r\n    } \r\n  }\r\n});","import { selector } from 'recoil';\r\n\r\nimport { specsState } from '../../SpecInputs/state';\r\nimport { realCoorsState } from './realCoors';\r\n\r\nexport const BOUNDS = {\r\n  'step-resolution': {\r\n    upper: 45,\r\n    lower: 0.01\r\n  },\r\n}\r\n\r\nexport const specErrorsState = selector({\r\n  key: 'specErrors',\r\n  get: ({get}) => {\r\n    const realCoors = get(realCoorsState);\r\n    const specsAlpha = get(specsState);\r\n\r\n    if (!realCoors) {\r\n      return { msg: 'Specs are not physically valid' };\r\n    } else if (realCoors.outputRect.x + realCoors.outputRect.width > realCoors.rightEye.x) {\r\n      return { msg: 'Can\\'t draw outside vertical bounds of eyes' };\r\n    }\r\n\r\n    const specs = Object.keys(specsAlpha).reduce((out, k) => ({\r\n      ...out,\r\n      [k]: Number(specsAlpha[k])\r\n    }), {});\r\n\r\n    // have spec values been entered?\r\n    for (let k of Object.keys(BOUNDS)) {\r\n      if (!(k in specs)) {\r\n        return { spec: k, msg: `Missing ${k} specification` };\r\n      }\r\n    }\r\n\r\n    // are all spec values within a reasonable range? (lower bounds)\r\n    for (let k of Object.keys(BOUNDS)) {\r\n      if (specs[k] > BOUNDS[k].upper) {\r\n        return { spec: k, msg: `${k} is too high; max is ${BOUNDS[k].upper}` };\r\n      } else if (specs[k] < BOUNDS[k].lower) {\r\n        return { spec: k, msg: `${k} is too low; minimum is ${BOUNDS[k].lower}` };\r\n      }\r\n    }\r\n\r\n    return null;\r\n  },\r\n});","import { selector } from 'recoil';\r\n\r\nimport { specErrorsState } from './specErrors';\r\n\r\nexport const specsReadyState = selector({\r\n  key: 'specsReady',\r\n  get: ({get}) => {\r\n    const errors = get(specErrorsState);\r\n    return !errors;\r\n  },\r\n});","import React from 'react';\r\nimport { Button } from 'reactstrap';\r\n\r\nimport useConverter from './useConverter';\r\n\r\nconst Converter = () => {\r\n  const { specErrors, coorErrors, ready, go, downloadHref } = useConverter();\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-12\">\r\n        <div className=\"my-2\">\r\n          {coorErrors \r\n            ? <span className=\"text-danger\">{coorErrors.msg}</span>\r\n            : specErrors \r\n              ? <span className=\"text-danger\">{specErrors.msg}</span>\r\n              : null\r\n          }\r\n        </div>\r\n      </div>\r\n      <div className=\"col-12\">\r\n        <Button disabled={!ready} onClick={go}>Calc motor control</Button>\r\n      </div>\r\n      <div className=\"col-12 my-3\">\r\n        {downloadHref !== '' && <a href={downloadHref} download=\"motorControl.json\">download</a>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Converter;","import { useState, useEffect } from 'react';\r\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\r\n\r\nimport { fileContentState } from '../ImageHandler/state';\r\nimport { specsState } from '../SpecInputs/state';\r\nimport { progressState, specErrorsState, specsReadyState, coorErrorsState, realCoorsState, downloadBlobState } from './state';\r\n\r\nimport solveCoors from './helpers/solveCoors';\r\n\r\nexport default function useConverter() {\r\n  const setProgress = useSetRecoilState(progressState);\r\n  const specsAlpha = useRecoilValue(specsState);\r\n  const fileContent = useRecoilValue(fileContentState);\r\n  const specsReady = useRecoilValue(specsReadyState);\r\n  const specErrors = useRecoilValue(specErrorsState);\r\n  const coorErrors = useRecoilValue(coorErrorsState);\r\n  const realCoors = useRecoilValue(realCoorsState);\r\n  const [downloadBlob, setDownloadBlob] = useRecoilState(downloadBlobState);\r\n  const [downloadHref, setDownloadHref] = useState('');\r\n  \r\n  const mmToCm = (mm) => mm / 10;\r\n  const mmToM = (mm) => mm / 1000;\r\n  const cmToMm = (cm) => cm * 10;\r\n  const cmToM = (cm) => cm / 100;\r\n  const mToMm = (m) => m * 1000;\r\n  const mToCm = (m) => m * 100;\r\n\r\n  const go = async () => {\r\n    if (specsReady) {\r\n      const specs = Object.keys(specsAlpha).reduce((out, k) => ({\r\n        ...out,\r\n        [k]: Number(specsAlpha[k])\r\n      }), {});\r\n\r\n      setProgress([]);\r\n      const progress = [];\r\n      const updateProgress = async (msg) => {\r\n        progress.push(msg);\r\n        setProgress([ ...progress ]);\r\n        // give progress a chance to propogate\r\n        await new Promise((resolve) => setTimeout(resolve, 0));\r\n      }\r\n\r\n      // ---- Get SVG, it's dimensions and paths ----\r\n      const parser = new DOMParser();\r\n      const dom = parser.parseFromString(fileContent, \"application/xml\");\r\n\r\n      const mySvg = dom.querySelector(\"svg\");\r\n      const [_minX, _minY, _width, height] = mySvg.getAttribute(\"viewBox\").split(\" \");\r\n\r\n      // in future, also get: circle, ellipse, line, mesh, path, polygon, polyline, rect?\r\n      const myPaths = Array.from(dom.querySelectorAll(\"path\"));\r\n      await updateProgress(`Found ${myPaths.length} paths, of lengths:`);\r\n      for (let i = 0; i < myPaths.length; i++) {\r\n        await updateProgress(`${i}: ${Math.round(myPaths[i].getTotalLength() * 100) / 100}`);\r\n      }     \r\n      \r\n      // ---- Define functions for converting SVG coors into real-world coors ----\r\n      const unitToMm = (unit) => unit * cmToMm(specs[\"final-height\"]) / height;\r\n      const mmToUnit = (mm) => mm * height / cmToMm(specs[\"final-height\"]);\r\n\r\n      const pointToCoor = (point) => ({\r\n        x: cmToMm(realCoors.outputRect.x) + unitToMm(point.x),\r\n        y: cmToMm(realCoors.outputRect.y) + unitToMm(point.y)\r\n      });\r\n\r\n      // how far away is coorB from a line passing through coorA and coorC\r\n      const distToLine = (coorA, coorB, coorC) => {\r\n        return (\r\n          Math.abs((coorC.x - coorA.x) * (coorA.y - coorB.y) - (coorA.x - coorB.x) * (coorC.y - coorA.y)) /\r\n          Math.sqrt(Math.pow((coorC.x - coorA.x), 2) + Math.pow((coorC.y - coorA.y), 2))\r\n        );\r\n      }\r\n\r\n      const pathToCoors = (path) => {\r\n        const out = [];\r\n        const total = unitToMm(path.getTotalLength());\r\n\r\n        // use 2mm output resolution\r\n        const resolution = 2;\r\n\r\n        out.push(\r\n          pointToCoor(\r\n            path.getPointAtLength(0)));\r\n\r\n        if (total > resolution) {\r\n\r\n          out.push(\r\n            pointToCoor(\r\n              path.getPointAtLength(\r\n                mmToUnit(resolution))));\r\n\r\n          if (total > resolution * 2) {\r\n            let lag = 0;\r\n            let mm = resolution * 2; \r\n            let precision = resolution;\r\n\r\n            while (mm < total) {\r\n              const newCoor = pointToCoor(path.getPointAtLength(mmToUnit(mm)))\r\n              const dist = distToLine(out[lag], out[lag+1], newCoor);\r\n\r\n              if (dist < precision) {\r\n                out[lag+1] = newCoor;\r\n                precision = precision / 2;\r\n              } else {\r\n                lag += 1;\r\n                out.push(newCoor);\r\n                precision = resolution;\r\n              }\r\n              \r\n              mm += resolution;\r\n            }\r\n          }\r\n        } \r\n\r\n        out.push(pointToCoor(path.getPointAtLength(path.getTotalLength())));\r\n\r\n        return out;\r\n      }\r\n\r\n      // ---- Define functions to convert straight lines to motor moves ----\r\n      const getPulses = ({ actualLeftSteps, leftDirection, actualRightSteps, rightDirection }) => {\r\n        const mostSteps = Math.max(actualLeftSteps, actualRightSteps);\r\n\r\n        const leftModulus = actualLeftSteps === 0 ? 0 : mostSteps / actualLeftSteps;\r\n        const rightModulus = actualRightSteps === 0 ? 0 : mostSteps / actualRightSteps;\r\n\r\n        const out = new Array(mostSteps).fill(null).map(() => ({ l: 0, r: 0 }));\r\n\r\n        if (leftModulus > 0 && rightModulus > 0) {\r\n          let leftSum = 0;\r\n          let rightSum = 0;\r\n          for (let i = 0; i < mostSteps; i++) {\r\n            if (i >= leftSum) {\r\n              out[i].l = leftDirection;\r\n              leftSum += leftModulus;\r\n            }\r\n            if (i >= rightSum) {\r\n              out[i].r = rightDirection;\r\n              rightSum += rightModulus;\r\n            }\r\n          }\r\n        } else if (rightModulus <= 0) {\r\n          let leftSum = 0;\r\n          for (let i = 0; i < mostSteps; i++) {\r\n            if (i >= leftSum) {\r\n              out[i].l = leftDirection;\r\n              leftSum += leftModulus;\r\n            }\r\n          }\r\n        } else if (leftModulus <= 0) {\r\n          let rightSum = 0;\r\n          for (let i = 0; i < mostSteps; i++) {\r\n            if (i >= rightSum) {\r\n              out[i].r = rightDirection;\r\n              rightSum += rightModulus;\r\n            }\r\n          }\r\n        }\r\n\r\n        return out;\r\n      }\r\n\r\n      // euclidean distance\r\n      const eD = (a, b) => Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\r\n\r\n      const mmPerStep = cmToMm(2 * Math.PI * specs['spool-radius'] * specs['step-resolution'] / 360);\r\n      const stepsPerMm = 1 / mmPerStep;\r\n\r\n      const traverseStraight = (current, desired) => {\r\n        const currentLeftCoor = { x: current.x - cmToMm(specs['tool-offset-x']), y: current.y - cmToMm(specs['tool-offset-y'])};\r\n        const desiredLeftCoor = { x: desired.x - cmToMm(specs['tool-offset-x']), y: desired.y - cmToMm(specs['tool-offset-y'])};\r\n        const currentRightCoor = { x: current.x + cmToMm(specs['tool-offset-x']), y: current.y - cmToMm(specs['tool-offset-y'])};\r\n        const desiredRightCoor = { x: desired.x + cmToMm(specs['tool-offset-x']), y: desired.y - cmToMm(specs['tool-offset-y'])};\r\n\r\n        const leftDelta = eD({ x: 0, y: 0 }, desiredLeftCoor) - eD({ x: 0, y: 0 }, currentLeftCoor);\r\n        const rightDelta = eD({ x: cmToMm(specs['eye-to-eye']), y: 0 }, desiredRightCoor) - eD({ x: cmToMm(specs['eye-to-eye']), y: 0 }, currentRightCoor);\r\n\r\n        const actualLeftSteps = Math.round(Math.abs(leftDelta) * stepsPerMm);\r\n        const actualRightSteps = Math.round(Math.abs(rightDelta) * stepsPerMm);\r\n\r\n        // 1  = longer\r\n        // 0  = no op\r\n        // -1 = shorter\r\n        const leftDirection = actualLeftSteps === 0 ? 0 : leftDelta / Math.abs(leftDelta);\r\n        const rightDirection = actualRightSteps === 0 ? 0 : rightDelta / Math.abs(rightDelta);\r\n\r\n        const newLeftLength = eD({ x: 0, y: 0 }, currentLeftCoor) + (actualLeftSteps * mmPerStep * leftDirection);\r\n        const newRightLength = eD({ x: cmToMm(specs['eye-to-eye']), y: 0 }, currentRightCoor) + (actualRightSteps * mmPerStep * rightDirection);\r\n\r\n        return { \r\n          pulses: getPulses({ actualLeftSteps, leftDirection, actualRightSteps, rightDirection }),\r\n          newCurrent: solveCoors({ \r\n            eyeToEye: cmToMm(specs['eye-to-eye']),\r\n            toolOffsetX: cmToMm(specs['tool-offset-x']),\r\n            toolOffsetY: cmToMm(specs['tool-offset-y']),\r\n            leftLength: newLeftLength,\r\n            rightLength: newRightLength\r\n          })\r\n        };\r\n      }\r\n\r\n      // ---- Gather all real-world coors we want to hit ----\r\n      const masterCoors = {};\r\n      masterCoors['start'] = { x: cmToMm(realCoors.outputRect.x), y: cmToMm(realCoors.outputRect.y) };\r\n\r\n      let t1;\r\n      for (let i = 0; i < myPaths.length; i++) {\r\n        t1 = Date.now();\r\n\r\n        const key = `path-${i}`;\r\n        masterCoors[key] = pathToCoors(myPaths[i]);\r\n        \r\n        let t2 = Date.now();\r\n        await updateProgress(`path ${i} converted to coors (${t2-t1} ms)`);\r\n      }\r\n\r\n      // ---- Traverse all paths sequentially ----\r\n      let bigPulseList = [];\r\n\r\n      let current = masterCoors.start;\r\n      for (let i = 0; i < myPaths.length; i++) {\r\n        t1 = Date.now();\r\n      \r\n        for (let coor of masterCoors[`path-${i}`]) {\r\n          const { newCurrent, pulses } = traverseStraight(current, coor);\r\n\r\n          if (!newCurrent) {\r\n            return null;\r\n          }\r\n\r\n          current = newCurrent;\r\n          bigPulseList = [ ...bigPulseList, ...pulses ];\r\n        }\r\n\r\n        let t2 = Date.now();\r\n        await updateProgress(`path ${i} converted to pulses (${t2-t1} ms)`);\r\n      }\r\n\r\n      // get steps per second\r\n      const stepsPerSecond = () => {\r\n        const oneStep = specs['step-resolution'] / 360 * specs['spool-radius'] * 2 * Math.PI;\r\n        return 2.0 / oneStep; // ~ 2cm/s\r\n      }\r\n\r\n      const out = {\r\n        stepsPerSecond: stepsPerSecond(),\r\n        pulses: bigPulseList\r\n      };\r\n\r\n      setDownloadBlob(new Blob([JSON.stringify(out)], {type: 'text/plain'}));\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (downloadBlob) {\r\n      setDownloadHref(URL.createObjectURL(downloadBlob));\r\n    }\r\n  }, [downloadBlob]);\r\n  \r\n  return {\r\n    specErrors,\r\n    coorErrors,\r\n    ready: specsReady,\r\n    go,\r\n    downloadHref\r\n  };\r\n}","import React from 'react';\r\n\r\nimport usePreview from './usePreview';\r\n\r\nconst Preview = () => {\r\n  const { svg } = usePreview();\r\n\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <div className=\"mb-2\">\r\n        <span>Preview</span>\r\n      </div>\r\n      <div className=\"d-flex\">\r\n        <div style={{ border: \"1px solid black\", height: \"402px\", minWidth: \"402px\", overflowY: \"scroll\" }}>\r\n          {svg}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Preview;","import React, { useEffect, useState } from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\n\r\nimport { realCoorsState } from '../Converter/state';\r\n\r\nexport default function usePreview() {\r\n  const coors = useRecoilValue(realCoorsState);\r\n  const [svg, setSvg] = useState(null);\r\n\r\n  const padding = 20;\r\n\r\n  useEffect(() => {\r\n    if (coors) {\r\n      const newSvg = (\r\n        <svg\r\n          version=\"1.1\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"400\"\r\n          viewBox={`-${padding} -${padding} ${coors.totalWidth + 2 * padding} ${coors.totalHeight + 2 * padding}`}>\r\n          <line \r\n            x1={coors.leftLine.start.x}\r\n            y1={coors.leftLine.start.y}\r\n            x2={coors.leftLine.end.x}\r\n            y2={coors.leftLine.end.y}\r\n            style={{ stroke: \"black\", strokeWidth: 1 }} />\r\n          <line \r\n            x1={coors.rightLine.start.x}\r\n            y1={coors.rightLine.start.y}\r\n            x2={coors.rightLine.end.x}\r\n            y2={coors.rightLine.end.y}\r\n            style={{ stroke: \"black\", strokeWidth: 1 }} />\r\n          <rect\r\n            x={coors.outputRect.x}\r\n            y={coors.outputRect.y}\r\n            width={coors.outputRect.width}\r\n            height={coors.outputRect.height}\r\n            style={{ fill: \"blue\" }} />\r\n          <circle\r\n            cx={coors.leftEye.x}\r\n            cy={coors.leftEye.y}\r\n            r={coors.spoolRadius}\r\n            fill=\"black\" />\r\n          <circle\r\n            cx={coors.rightEye.x}\r\n            cy={coors.rightEye.y}\r\n            r={coors.spoolRadius}\r\n            fill=\"black\" />\r\n        </svg>\r\n      )\r\n      setSvg(newSvg);\r\n    } else {\r\n      setSvg(null);\r\n    }\r\n  }, [coors]);\r\n\r\n  return { \r\n    svg\r\n  };\r\n}","import React from 'react';\r\n\r\nimport useConversionProgress from './useConversionProgress';\r\n\r\nconst ConversionProgress = () => {\r\n  const { progress } = useConversionProgress();\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"mb-2\">\r\n        <span>Progress</span>\r\n      </div>\r\n      <div className=\"d-flex\">\r\n        <div style={{ border: \"1px solid black\", height: \"402px\", width: \"402px\", overflowY: \"scroll\", padding: \"10px\" }}>\r\n          {progress.map(msg => <div key={msg}><span>&gt; {msg}</span></div>)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConversionProgress;","import { useRecoilValue } from 'recoil';\r\n\r\nimport { progressState } from '../Converter/state';\r\n\r\nexport default function useConversionProgress() {\r\n  const progress = useRecoilValue(progressState);\r\n\r\n  return {\r\n    progress\r\n  };\r\n}","import React from 'react';\r\nimport { RecoilRoot } from 'recoil';\r\n\r\nimport ImageHandler from './components/ImageHandler';\r\nimport SpecInputs from './components/SpecInputs';\r\nimport Converter from './components/Converter';\r\nimport Preview from './components/Preview';\r\nimport ConversionProgress from './components/ConversionProgress';\r\n\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <RecoilRoot>\r\n      <div className=\"container my-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-6\">\r\n            <ImageHandler />\r\n            <Preview />\r\n            <ConversionProgress />\r\n          </div>\r\n          <div className=\"col-lg-6\">\r\n            <SpecInputs />\r\n            <Converter />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </RecoilRoot>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}